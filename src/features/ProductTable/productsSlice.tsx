import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { RootState } from "../../app/store";
import { products } from "./fetchProducts";

export interface IProducts {
  productsInfo: Array<{ [key: string]: any }>;
  status: "idle" | "loading" | "failed";
}

const initialState: IProducts = {
  productsInfo: [],
  status: "idle",
};

export const fetchProducts = createAsyncThunk(
  "products/fetchProducts",
  async () => {
    return products.map((product) => ({ ...product}));
  }
);

export const productsSlice = createSlice({
  name: "products",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setProducts: (state, action) => {
      state.productsInfo = action.payload;
    },
    clearAllChecks: (state) => {
      state.productsInfo = products;
      return state;
    },
    checkAllItems: (state, action) => {
      const { index } = action.payload;
      const itemsList = state.productsInfo[index].itemList;
      itemsList.forEach((item: any) => {
        item.checked = true;
      });
      return state;
    },
    toggleChecked: (state, action) => {
      const { index, productIndex } = action.payload;
      state.productsInfo[productIndex].itemList[index].checked =
        !state.productsInfo[productIndex].itemList[index].checked;
      return state;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchProducts.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchProducts.fulfilled, (state, action) => {
        state.status = "idle";
        state.productsInfo = action.payload;
      })
      .addCase(fetchProducts.rejected, (state) => {
        state.status = "failed";
      });
  },
});

export const { setProducts, toggleChecked, checkAllItems, clearAllChecks } =
  productsSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectProducts = (state: RootState) => state.products.productsInfo;

export default productsSlice.reducer;
